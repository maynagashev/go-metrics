// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	metrics "github.com/maynagashev/go-metrics/internal/contracts/metrics"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/maynagashev/go-metrics/internal/server/storage"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Repository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *Repository) Count() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetCounter provides a mock function with given fields: name
func (_m *Repository) GetCounter(name string) (storage.Counter, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetCounter")
	}

	var r0 storage.Counter
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (storage.Counter, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) storage.Counter); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(storage.Counter)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetGauge provides a mock function with given fields: name
func (_m *Repository) GetGauge(name string) (storage.Gauge, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGauge")
	}

	var r0 storage.Gauge
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (storage.Gauge, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) storage.Gauge); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(storage.Gauge)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMetric provides a mock function with given fields: mType, name
func (_m *Repository) GetMetric(mType metrics.MetricType, name string) (metrics.Metric, bool) {
	ret := _m.Called(mType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 metrics.Metric
	var r1 bool
	if rf, ok := ret.Get(0).(func(metrics.MetricType, string) (metrics.Metric, bool)); ok {
		return rf(mType, name)
	}
	if rf, ok := ret.Get(0).(func(metrics.MetricType, string) metrics.Metric); ok {
		r0 = rf(mType, name)
	} else {
		r0 = ret.Get(0).(metrics.Metric)
	}

	if rf, ok := ret.Get(1).(func(metrics.MetricType, string) bool); ok {
		r1 = rf(mType, name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields:
func (_m *Repository) GetMetrics() []metrics.Metric {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 []metrics.Metric
	if rf, ok := ret.Get(0).(func() []metrics.Metric); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]metrics.Metric)
		}
	}

	return r0
}

// UpdateMetric provides a mock function with given fields: metric
func (_m *Repository) UpdateMetric(metric metrics.Metric) error {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metrics.Metric) error); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMetrics provides a mock function with given fields: _a0
func (_m *Repository) UpdateMetrics(_a0 []metrics.Metric) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]metrics.Metric) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
