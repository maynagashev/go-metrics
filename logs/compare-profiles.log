File: server
Type: alloc_space
Time: Feb 15, 2025 at 11:00pm (WIB)
Showing nodes accounting for -85.64MB, 85.43% of 100.24MB total
Dropped 4 nodes (cum <= 0.50MB)
      flat  flat%   sum%        cum   cum%
  -33.49MB 33.41% 33.41%   -46.14MB 46.03%  compress/flate.NewWriter (inline)
   -9.28MB  9.26% 42.67%    -9.28MB  9.26%  compress/flate.(*dictDecoder).init (inline)
   -8.01MB  7.99% 50.66%    -8.01MB  7.99%  compress/flate.(*compressor).initDeflate (inline)
   -3.34MB  3.33% 54.00%    -3.34MB  3.33%  compress/flate.newDeflateFast (inline)
   -3.03MB  3.02% 57.02%    -3.03MB  3.02%  go.uber.org/zap/buffer.(*Buffer).Write (inline)
   -3.02MB  3.01% 60.03%    -5.54MB  5.53%  github.com/jackc/pgx/v5/pgproto3.(*Bind).Encode
   -3.01MB  3.00% 63.03%    -3.01MB  3.00%  bytes.growSlice
   -2.52MB  2.52% 65.55%    -2.52MB  2.52%  github.com/jackc/pgx/v5/internal/pgio.AppendUint32 (inline)
   -2.02MB  2.01% 67.56%    -2.02MB  2.01%  go.uber.org/zap/buffer.(*Buffer).AppendString
   -2.01MB  2.00% 69.56%    -2.01MB  2.00%  bytes.(*Buffer).String (partial-inline)
   -2.01MB  2.00% 71.57%   -11.29MB 11.27%  compress/flate.NewReader
      -2MB  2.00% 73.57%       -2MB  2.00%  io.ReadAll
      -2MB  2.00% 75.56%       -2MB  2.00%  github.com/jackc/pgx/v5.(*Batch).Queue (inline)
   -1.80MB  1.80% 77.36%   -12.65MB 12.62%  compress/flate.(*compressor).init
   -1.06MB  1.06% 78.42%    -1.06MB  1.06%  net.open
   -1.01MB  1.00% 79.42%    -1.01MB  1.00%  os.ReadFile
   -1.01MB  1.00% 80.43%    -1.01MB  1.00%  go.uber.org/zap/buffer.(*Buffer).AppendByte (inline)
   -0.51MB  0.51% 80.93%    -4.58MB  4.57%  runtime/pprof.(*profileBuilder).emitLocation
   -0.50MB   0.5% 81.44%    -0.50MB   0.5%  unicode.map.init.1
   -0.50MB   0.5% 81.94%    -0.50MB   0.5%  github.com/jackc/pgx/v5/internal/pgio.AppendUint16 (inline)
   -0.50MB   0.5% 82.44%    -0.50MB   0.5%  strings.(*Replacer).build
   -0.50MB   0.5% 82.94%    -0.50MB   0.5%  bufio.NewReaderSize (inline)
    0.50MB   0.5% 82.44%     0.50MB   0.5%  regexp.(*bitState).reset
    0.50MB   0.5% 81.94%    11.72MB 11.69%  github.com/maynagashev/go-metrics/internal/server/router.New.New.func4.1
    0.50MB   0.5% 81.44%    10.71MB 10.69%  github.com/maynagashev/go-metrics/internal/server/router.New.NewBulkUpdate.func7
   -0.50MB   0.5% 81.94%    -0.50MB   0.5%  compress/flate.(*huffmanEncoder).generate
   -0.50MB   0.5% 82.44%    -0.50MB   0.5%  reflect.growslice
    0.50MB   0.5% 81.94%     0.50MB   0.5%  compress/flate.newHuffmanBitWriter (inline)
   -0.50MB   0.5% 82.44%    -0.50MB   0.5%  go.uber.org/zap/internal/bufferpool.init.NewPool.func1
   -0.50MB   0.5% 82.94%    -0.50MB   0.5%  net/http.Header.Clone (inline)
   -0.50MB   0.5% 83.44%    -6.05MB  6.04%  github.com/maynagashev/go-metrics/internal/server/router.New.New.func3.1.1
   -0.50MB   0.5% 83.94%    -0.50MB   0.5%  net/http.(*Request).WithContext (inline)
   -0.50MB   0.5% 84.44%   -12.07MB 12.04%  runtime/pprof.writeHeapProto
    0.50MB   0.5% 83.94%     0.50MB   0.5%  regexp/syntax.(*parser).newRegexp (inline)
   -0.50MB   0.5% 84.44%    -8.54MB  8.52%  github.com/maynagashev/go-metrics/internal/server/storage/pgstorage.(*PgStorage).UpdateMetrics
   -0.50MB   0.5% 84.93%    -0.50MB   0.5%  bytes.NewBuffer (inline)
   -0.50MB   0.5% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5/pgtype.initDefaultMap
         0     0% 85.43%    -0.50MB   0.5%  bufio.(*Writer).Flush
         0     0% 85.43%    -0.50MB   0.5%  bufio.NewReader (inline)
         0     0% 85.43%    -2.51MB  2.50%  bytes.(*Buffer).ReadFrom
         0     0% 85.43%    -0.50MB   0.5%  bytes.(*Buffer).Write
         0     0% 85.43%    -3.01MB  3.00%  bytes.(*Buffer).grow
         0     0% 85.43%       -1MB  1.00%  compress/flate.(*Writer).Close (inline)
         0     0% 85.43%       -1MB  1.00%  compress/flate.(*compressor).close
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*compressor).deflate
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*compressor).encSpeed
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*compressor).writeBlock
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).indexTokens
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).write (inline)
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).writeBlock
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).writeBlockDynamic
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).writeCode
         0     0% 85.43%    -0.50MB   0.5%  compress/flate.(*huffmanBitWriter).writeTokens
         0     0% 85.43%   -11.79MB 11.77%  compress/gzip.(*Reader).Reset
         0     0% 85.43%   -11.29MB 11.27%  compress/gzip.(*Reader).readHeader
         0     0% 85.43%       -1MB  1.00%  compress/gzip.(*Writer).Close
         0     0% 85.43%   -47.03MB 46.91%  compress/gzip.(*Writer).Write
         0     0% 85.43%   -11.79MB 11.77%  compress/gzip.NewReader
         0     0% 85.43%    -0.50MB   0.5%  encoding/json.(*decodeState).array
         0     0% 85.43%    -0.50MB   0.5%  encoding/json.(*decodeState).unmarshal
         0     0% 85.43%    -0.50MB   0.5%  encoding/json.(*decodeState).value
         0     0% 85.43%    -0.50MB   0.5%  encoding/json.Unmarshal
         0     0% 85.43%   -37.48MB 37.38%  fmt.Fprint
         0     0% 85.43%   -12.57MB 12.54%  github.com/go-chi/chi/v5.(*Mux).Mount.func1
         0     0% 85.43%   -85.46MB 85.25%  github.com/go-chi/chi/v5.(*Mux).ServeHTTP
         0     0% 85.43%   -65.11MB 64.95%  github.com/go-chi/chi/v5.(*Mux).routeHTTP
         0     0% 85.43%   -84.96MB 84.75%  github.com/go-chi/chi/v5/middleware.(*Compressor).Handler-fm.(*Compressor).Handler.func1
         0     0% 85.43%     0.88MB  0.88%  github.com/go-chi/chi/v5/middleware.(*Compressor).SetEncoder
         0     0% 85.43%   -37.98MB 37.88%  github.com/go-chi/chi/v5/middleware.(*basicWriter).Write
         0     0% 85.43%    -0.50MB   0.5%  github.com/go-chi/chi/v5/middleware.(*basicWriter).WriteHeader
         0     0% 85.43%    -0.50MB   0.5%  github.com/go-chi/chi/v5/middleware.(*compressResponseWriter).Close
         0     0% 85.43%   -37.48MB 37.38%  github.com/go-chi/chi/v5/middleware.(*compressResponseWriter).Write
         0     0% 85.43%    -0.50MB   0.5%  github.com/go-chi/chi/v5/middleware.(*compressResponseWriter).WriteHeader
         0     0% 85.43%     0.88MB  0.88%  github.com/go-chi/chi/v5/middleware.Compress (inline)
         0     0% 85.43%     0.88MB  0.88%  github.com/go-chi/chi/v5/middleware.NewCompressor
         0     0% 85.43%   -84.45MB 84.25%  github.com/go-chi/chi/v5/middleware.Recoverer.func1
         0     0% 85.43%   -84.45MB 84.25%  github.com/go-chi/chi/v5/middleware.RequestID.func1
         0     0% 85.43%   -84.45MB 84.25%  github.com/go-chi/chi/v5/middleware.StripSlashes.func1
         0     0% 85.43%     0.88MB  0.88%  github.com/go-chi/chi/v5/middleware.encoderDeflate
         0     0% 85.43%     0.50MB   0.5%  github.com/golang-migrate/migrate/v4.New
         0     0% 85.43%     0.50MB   0.5%  github.com/golang-migrate/migrate/v4/source.Open
         0     0% 85.43%     0.50MB   0.5%  github.com/golang-migrate/migrate/v4/source.Parse
         0     0% 85.43%     0.50MB   0.5%  github.com/golang-migrate/migrate/v4/source/file.(*File).Open
         0     0% 85.43%     0.50MB   0.5%  github.com/golang-migrate/migrate/v4/source/iofs.(*PartialDriver).Init
         0     0% 85.43%     0.50MB   0.5%  github.com/jackc/pgpassfile.init
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5.(*Conn).SendBatch
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5.(*Conn).sendBatchExtendedWithDescription
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5.(*Conn).sendBatchQueryExecModeCacheStatement
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5.(*dbTx).SendBatch
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5.ConnectConfig
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5.connect
         0     0% 85.43%    -2.52MB  2.52%  github.com/jackc/pgx/v5/internal/pgio.AppendInt32 (inline)
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5/pgconn.(*Pipeline).SendQueryPrepared
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5/pgproto3.(*Execute).Encode
         0     0% 85.43%    -5.54MB  5.53%  github.com/jackc/pgx/v5/pgproto3.(*Frontend).SendBind
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5/pgproto3.(*Frontend).SendExecute
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5/pgtype.NewMap
         0     0% 85.43%    -6.04MB  6.03%  github.com/jackc/pgx/v5/pgxpool.(*Tx).SendBatch
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/pgx/v5/pgxpool.NewWithConfig.func1
         0     0% 85.43%    -0.50MB   0.5%  github.com/jackc/puddle/v2.(*Pool[go.shape.*uint8]).initResourceValue.func1
         0     0% 85.43%    -0.53MB  0.53%  github.com/maynagashev/go-metrics/internal/server/app.(*Server).Start
         0     0% 85.43%    -6.02MB  6.00%  github.com/maynagashev/go-metrics/internal/server/handlers/json/updates.validateRequest
         0     0% 85.43%    11.72MB 11.69%  github.com/maynagashev/go-metrics/internal/server/middleware/decompresspool.(*Middleware).Handler-fm.(*Middleware).Handler.func1
         0     0% 85.43%    -2.50MB  2.50%  github.com/maynagashev/go-metrics/internal/server/middleware/logger.readRequestBody
         0     0% 85.43%     0.88MB  0.88%  github.com/maynagashev/go-metrics/internal/server/router.New
         0     0% 85.43%   -96.17MB 95.94%  github.com/maynagashev/go-metrics/internal/server/router.New.New.func2.1
         0     0% 85.43%   -84.38MB 84.17%  github.com/maynagashev/go-metrics/internal/server/router.New.New.func3.1
         0     0% 85.43%   -63.25MB 63.10%  github.com/maynagashev/go-metrics/internal/server/router.New.NewBulkUpdate.func6
         0     0% 85.43%     0.50MB   0.5%  github.com/maynagashev/go-metrics/internal/server/storage/pgstorage.New
         0     0% 85.43%     0.50MB   0.5%  github.com/maynagashev/go-metrics/internal/server/storage/pgstorage/migration.Up
         0     0% 85.43%   -37.48MB 37.38%  github.com/maynagashev/go-metrics/pkg/response.OK
         0     0% 85.43%   -37.48MB 37.38%  github.com/maynagashev/go-metrics/pkg/response.writeResponse
         0     0% 85.43%       -2MB  2.00%  go.uber.org/zap.(*Logger).Debug
         0     0% 85.43%    -5.05MB  5.04%  go.uber.org/zap.(*Logger).Info
         0     0% 85.43%     0.50MB   0.5%  go.uber.org/zap.(*Logger).With
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/buffer.Pool.Get
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/internal/bufferpool.init.NewPool.New[go.shape.*uint8].func2
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/internal/pool.(*Pool[go.shape.*uint8]).Get (inline)
         0     0% 85.43%    -7.05MB  7.04%  go.uber.org/zap/zapcore.(*CheckedEntry).Write
         0     0% 85.43%     0.50MB   0.5%  go.uber.org/zap/zapcore.(*ioCore).With
         0     0% 85.43%    -7.05MB  7.04%  go.uber.org/zap/zapcore.(*ioCore).Write
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.(*jsonEncoder).AddString
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.(*jsonEncoder).AppendString
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/zapcore.(*jsonEncoder).Clone
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.(*jsonEncoder).safeAddString (inline)
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/zapcore.EntryCaller.TrimmedPath
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.Field.AddTo
         0     0% 85.43%    -0.50MB   0.5%  go.uber.org/zap/zapcore.ShortCallerEncoder
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.addFields (inline)
         0     0% 85.43%    -7.05MB  7.04%  go.uber.org/zap/zapcore.consoleEncoder.EncodeEntry
         0     0% 85.43%    -6.55MB  6.54%  go.uber.org/zap/zapcore.consoleEncoder.writeContext
         0     0% 85.43%    -3.02MB  3.02%  go.uber.org/zap/zapcore.safeAppendStringLike[go.shape.string]
         0     0% 85.43%    -0.50MB   0.5%  html.EscapeString (inline)
         0     0% 85.43%    -0.53MB  0.53%  internal/singleflight.(*Group).doCall
         0     0% 85.43%     0.50MB   0.5%  main.initStorage
         0     0% 85.43%     0.85MB  0.85%  main.main
         0     0% 85.43%    -0.53MB  0.53%  net.(*ListenConfig).Listen
         0     0% 85.43%    -0.53MB  0.53%  net.(*Resolver).lookupIP
         0     0% 85.43%    -0.53MB  0.53%  net.(*Resolver).lookupIPAddr.func1
         0     0% 85.43%    -0.53MB  0.53%  net.(*conf).hostLookupOrder
         0     0% 85.43%    -0.53MB  0.53%  net.(*conf).lookupOrder
         0     0% 85.43%    -0.53MB  0.53%  net.(*nsswitchConfig).init
         0     0% 85.43%    -0.53MB  0.53%  net.(*nsswitchConfig).tryUpdate
         0     0% 85.43%    -0.53MB  0.53%  net.(*sysListener).listenTCP (inline)
         0     0% 85.43%    -0.53MB  0.53%  net.(*sysListener).listenTCPProto
         0     0% 85.43%    -0.53MB  0.53%  net.Listen
         0     0% 85.43%    -0.53MB  0.53%  net.getSystemNSS
         0     0% 85.43%    -0.53MB  0.53%  net.init.func1
         0     0% 85.43%    -0.53MB  0.53%  net.internetSocket
         0     0% 85.43%    -0.53MB  0.53%  net.listenerBacklog
         0     0% 85.43%    -0.53MB  0.53%  net.listenerBacklog.func1
         0     0% 85.43%    -0.53MB  0.53%  net.maxListenerBacklog
         0     0% 85.43%    -0.53MB  0.53%  net.parseNSSConfFile
         0     0% 85.43%    -0.53MB  0.53%  net.socket
         0     0% 85.43%    -0.53MB  0.53%  net/http.(*Server).ListenAndServe
         0     0% 85.43%    -0.50MB   0.5%  net/http.(*chunkWriter).Write
         0     0% 85.43%    -0.50MB   0.5%  net/http.(*chunkWriter).writeHeader
         0     0% 85.43%   -78.04MB 77.85%  net/http.(*conn).serve
         0     0% 85.43%    -0.50MB   0.5%  net/http.(*response).WriteHeader
         0     0% 85.43%    -0.50MB   0.5%  net/http.(*response).finishRequest
         0     0% 85.43%   -84.96MB 84.75%  net/http.HandlerFunc.ServeHTTP
         0     0% 85.43%    -0.50MB   0.5%  net/http.Header.WriteSubset (inline)
         0     0% 85.43%    -0.50MB   0.5%  net/http.Header.sortedKeyValues
         0     0% 85.43%    -0.50MB   0.5%  net/http.Header.writeSubset
         0     0% 85.43%     0.50MB   0.5%  net/http.newBufioWriterSize
         0     0% 85.43%   -80.98MB 80.78%  net/http.serverHandler.ServeHTTP
         0     0% 85.43%    -0.50MB   0.5%  net/http/pprof.Index
         0     0% 85.43%   -12.07MB 12.04%  net/http/pprof.handler.ServeHTTP
         0     0% 85.43%    -0.50MB   0.5%  net/http/pprof.indexTmplExecute
         0     0% 85.43%    -0.50MB   0.5%  reflect.Value.Grow
         0     0% 85.43%    -0.50MB   0.5%  reflect.Value.grow
         0     0% 85.43%     0.50MB   0.5%  regexp.(*Regexp).FindStringSubmatch
         0     0% 85.43%     0.50MB   0.5%  regexp.(*Regexp).backtrack
         0     0% 85.43%     0.50MB   0.5%  regexp.(*Regexp).doExecute
         0     0% 85.43%     0.50MB   0.5%  regexp.Compile (inline)
         0     0% 85.43%     0.50MB   0.5%  regexp.MustCompile
         0     0% 85.43%     0.50MB   0.5%  regexp.compile
         0     0% 85.43%     0.50MB   0.5%  regexp/syntax.(*parser).op
         0     0% 85.43%     0.50MB   0.5%  regexp/syntax.Parse (inline)
         0     0% 85.43%     0.50MB   0.5%  regexp/syntax.parse
         0     0% 85.43%     0.85MB  0.85%  runtime.main
         0     0% 85.43%   -12.07MB 12.04%  runtime/pprof.(*Profile).WriteTo
         0     0% 85.43%    -4.58MB  4.57%  runtime/pprof.(*profileBuilder).appendLocsForStack
         0     0% 85.43%    -0.50MB   0.5%  runtime/pprof.(*profileBuilder).build
         0     0% 85.43%    -9.55MB  9.53%  runtime/pprof.(*profileBuilder).flush
         0     0% 85.43%    -5.48MB  5.47%  runtime/pprof.(*profileBuilder).pbSample
         0     0% 85.43%    -1.01MB  1.00%  runtime/pprof.(*profileBuilder).readMapping
         0     0% 85.43%    -1.01MB  1.00%  runtime/pprof.newProfileBuilder
         0     0% 85.43%   -12.07MB 12.04%  runtime/pprof.writeHeap
         0     0% 85.43%   -12.07MB 12.04%  runtime/pprof.writeHeapInternal
         0     0% 85.43%    -0.50MB   0.5%  strings.(*Replacer).Replace
         0     0% 85.43%    -0.50MB   0.5%  strings.(*Replacer).buildOnce
         0     0% 85.43%    -2.07MB  2.06%  sync.(*Once).Do (inline)
         0     0% 85.43%    -2.07MB  2.06%  sync.(*Once).doSlow
         0     0% 85.43%    -0.50MB   0.5%  sync.(*Pool).Get
         0     0% 85.43%    -0.50MB   0.5%  unicode.init
